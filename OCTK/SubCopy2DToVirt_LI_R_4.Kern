il_ps_2_0
;
;	2D subarray copy for the case when source array is not virtualized and destination is virtualized
; 
;	inputs: 1 (src)
;	outputs: 1 (dst)
;	data type: LONGINT/REAL
;	nComponents: 4 - for the input, 1 - for the output (virtualized)
;	constants: 1, 1x4 (LONGINT) : [srcOrigin[1]-dstOrigin[1],srcOrigin[0]-dstOrigin[0],dst.Width,dst.physWidth]
;	kernel type: PS
;
dcl_input_position_interp(linear_noperspective) vWinCoord0.xy__ ; origin in the output range
dcl_output_generic o0
dcl_cb cb0[1]
dcl_resource_id(0)_type(2d,unnorm)_fmtx(float)_fmty(float)_fmtz(float)_fmtw(float) ; src array

dcl_literal l0, 4, 0, 0, 0

; compute linear index in the output
ftoi r0.xy, vWinCoord0.xy
umad r0.x, r0.y, cb0[0].w, r0.x ; ind := y*dst.physWidth + x

; compute non-virtual position in the output
udiv r0.y, r0.x, cb0[0].z ; y := ind DIV dst.Width
umod r0.x, r0.x, cb0[0].z

; compute 2D position in the input, in single-component elements
iadd r0.xy, r0.xy, cb0[0].xy

umod r0.z, r0.x, l0.x ; x MOD 4

udiv r0.x, r0.x, l0.x ; input position in multi-component elements
itof r0.xy, r0.xy ; convert [x,y] to floats

switch r0.z
	
	case 0
		sample_resource(0)_sampler(0) o0.x, r0.xy
	break
	
	case 1
		sample_resource(0)_sampler(0) r1._y__, r0.xy
		mov o0.x, r1.y
	break
	
	case 2
		sample_resource(0)_sampler(0) r1.__z_, r0.xy
		mov o0.x, r1.z
	break

	case 3
		sample_resource(0)_sampler(0) r1.___w, r0.xy
		mov o0.x, r1.w
	break
endswitch

end